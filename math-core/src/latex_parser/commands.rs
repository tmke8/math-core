use crate::mathml_renderer::attribute::{
    FracAttr, MathVariant, Notation, OpAttr, Size, Style, TextTransform,
};
use crate::mathml_renderer::symbol::{self, Rel};

use super::Token::{self, *};
use super::character_class::Class;
use super::predefined;
use super::specifications::LatexUnit;

// These function names are essentially just passed-through, wrapped in a token.
static FUNCTIONS: phf::Set<&'static str> = phf::phf_set!(
    "Pr", "arccos", "arcsin", "arctan", "arg", "cos", "cosh", "cot", "coth", "csc", "deg", "det",
    "dim", "erf", "erfc", "exp", "gcd", "hom", "ker", "lg", "ln", "log", "sec", "sgn", "sin",
    "sinh", "tan", "tanh"
);

static COMMANDS: phf::Map<&'static str, Token> = phf::phf_map! {
    " " => NonBreakingSpace,
    "!" => Space(LatexUnit::Mu.length_with_unit(-3.0)),
    "#" => Letter(symbol::NUMBER_SIGN),
    "$" => Letter(symbol::DOLLAR_SIGN),
    "%" => Letter(symbol::PERCENT_SIGN),
    "&" => OpAmpersand,
    "," => Space(LatexUnit::Mu.length_with_unit(3.0)),
    ":" => Space(LatexUnit::Mu.length_with_unit(4.0)),
    ";" => Space(LatexUnit::Mu.length_with_unit(5.0)),
    ">" => Space(LatexUnit::Mu.length_with_unit(4.0)),
    "Alpha" => UprightLetter(symbol::GREEK_CAPITAL_LETTER_ALPHA),
    "And" => CustomCmd(0, &predefined::AND),
    "Angstrom" => Letter(symbol::ANGSTROM_SIGN),
    "Bbbk" => Letter(TextTransform::DoubleStruck.transform('k', false)),
    "Beta" => UprightLetter(symbol::GREEK_CAPITAL_LETTER_BETA),
    "Big" => Big(Size::Scale2, None),
    "Bigg" => Big(Size::Scale4, None),
    "Biggl" => Big(Size::Scale4, Some(Class::Open)),
    "Biggr" => Big(Size::Scale4, Some(Class::Close)),
    "Bigl" => Big(Size::Scale2, Some(Class::Open)),
    "Bigr" => Big(Size::Scale2, Some(Class::Close)),
    "Box" => Letter(symbol::WHITE_MEDIUM_SQUARE),
    "Bumpeq" => Relation(symbol::GEOMETRICALLY_EQUIVALENT_TO),
    "Cap" => BinaryOp(symbol::DOUBLE_INTERSECTION),
    "Chi" => UprightLetter(symbol::GREEK_CAPITAL_LETTER_CHI),
    "Colon" => Relation(symbol::PROPORTION),
    "Cup" => BinaryOp(symbol::DOUBLE_UNION),
    "Dagger" => Letter(symbol::DOUBLE_DAGGER),
    "Delta" => UprightLetter(symbol::GREEK_CAPITAL_LETTER_DELTA),
    "Diamond" => Letter(symbol::LOZENGE),
    "Doteq" => Relation(symbol::GEOMETRICALLY_EQUAL_TO),
    "Downarrow" => Relation(symbol::DOWNWARDS_DOUBLE_ARROW),
    "Epsilon" => UprightLetter(symbol::GREEK_CAPITAL_LETTER_EPSILON),
    "Eta" => UprightLetter(symbol::GREEK_CAPITAL_LETTER_ETA),
    "Finv" => Letter(symbol::TURNED_CAPITAL_F),
    "Game" => Letter(symbol::TURNED_SANS_SERIF_CAPITAL_G),
    "Gamma" => UprightLetter(symbol::GREEK_CAPITAL_LETTER_GAMMA),
    "Im" => Letter(symbol::BLACK_LETTER_CAPITAL_I),
    "Iota" => UprightLetter(symbol::GREEK_CAPITAL_LETTER_IOTA),
    "Join" => Relation(symbol::BOWTIE),
    "Kappa" => UprightLetter(symbol::GREEK_CAPITAL_LETTER_KAPPA),
    "Lambda" => UprightLetter(symbol::GREEK_CAPITAL_LETTER_LAMBDA),
    "Leftarrow" => Relation(symbol::LEFTWARDS_DOUBLE_ARROW),
    "Leftrightarrow" => Relation(symbol::LEFT_RIGHT_DOUBLE_ARROW),
    "Lleftarrow" => Relation(symbol::LEFTWARDS_TRIPLE_ARROW),
    "Longleftarrow" => Relation(symbol::LONG_LEFTWARDS_DOUBLE_ARROW),
    "Longleftrightarrow" => Relation(symbol::LONG_LEFT_RIGHT_DOUBLE_ARROW),
    "Longrightarrow" => Relation(symbol::LONG_RIGHTWARDS_DOUBLE_ARROW),
    "Lsh" => Relation(symbol::UPWARDS_ARROW_WITH_TIP_LEFTWARDS),
    "Mu" => UprightLetter(symbol::GREEK_CAPITAL_LETTER_MU),
    "Nu" => UprightLetter(symbol::GREEK_CAPITAL_LETTER_NU),
    "Omega" => UprightLetter(symbol::GREEK_CAPITAL_LETTER_OMEGA),
    "Omicron" => UprightLetter(symbol::GREEK_CAPITAL_LETTER_OMICRON),
    "P" => Letter(symbol::PILCROW_SIGN),
    "Phi" => UprightLetter(symbol::GREEK_CAPITAL_LETTER_PHI),
    "Pi" => UprightLetter(symbol::GREEK_CAPITAL_LETTER_PI),
    "Psi" => UprightLetter(symbol::GREEK_CAPITAL_LETTER_PSI),
    "RR" => Letter(symbol::DOUBLE_STRUCK_CAPITAL_R),
    "Re" => Letter(symbol::BLACK_LETTER_CAPITAL_R),
    "Rho" => UprightLetter(symbol::GREEK_CAPITAL_LETTER_RHO),
    "Rightarrow" => Relation(symbol::RIGHTWARDS_DOUBLE_ARROW),
    "Rrightarrow" => Relation(symbol::RIGHTWARDS_TRIPLE_ARROW),
    "Rsh" => Relation(symbol::UPWARDS_ARROW_WITH_TIP_RIGHTWARDS),
    "S" => Letter(symbol::SECTION_SIGN),
    "Sigma" => UprightLetter(symbol::GREEK_CAPITAL_LETTER_SIGMA),
    "Subset" => Relation(symbol::DOUBLE_SUBSET),
    "Supset" => Relation(symbol::DOUBLE_SUPERSET),
    "Tau" => UprightLetter(symbol::GREEK_CAPITAL_LETTER_TAU),
    "Theta" => UprightLetter(symbol::GREEK_CAPITAL_LETTER_THETA),
    "Uparrow" => Relation(symbol::UPWARDS_DOUBLE_ARROW),
    "Updownarrow" => Relation(symbol::UP_DOWN_DOUBLE_ARROW),
    "Upsilon" => UprightLetter(symbol::GREEK_CAPITAL_LETTER_UPSILON),
    "VDash" => Relation(symbol::DOUBLE_VERTICAL_BAR_DOUBLE_RIGHT_TURNSTILE),
    "Vdash" => Relation(symbol::FORCES),
    "Vert" => Ord(symbol::DOUBLE_VERTICAL_LINE),
    "Vvdash" => Relation(symbol::TRIPLE_VERTICAL_BAR_RIGHT_TURNSTILE),
    "Xi" => UprightLetter(symbol::GREEK_CAPITAL_LETTER_XI),
    "Yleft" => Relation(symbol::LEFTWARDS_ARROW_TAIL),
    "Yright" => Relation(symbol::RIGHTWARDS_ARROW_TAIL),
    "Zeta" => UprightLetter(symbol::GREEK_CAPITAL_LETTER_ZETA),
    "\\" => NewLine,
    "_" => Letter(symbol::LOW_LINE.as_op().as_char()),
    "acute" => OverUnder(symbol::ACUTE_ACCENT, true, None),
    "aleph" => Letter(symbol::ALEF_SYMBOL),
    "alpha" => Letter(symbol::GREEK_SMALL_LETTER_ALPHA),
    "amalg" => Relation(symbol::AMALGAMATION_OR_COPRODUCT),
    "angle" => Letter(symbol::ANGLE),
    "approx" => Relation(symbol::ALMOST_EQUAL_TO),
    "approxeq" => Relation(symbol::ALMOST_EQUAL_OR_EQUAL_TO),
    "arceq" => Relation(symbol::CORRESPONDS_TO), // from "stix"
    "argmax" => PseudoOperatorLimits("arg\u{2009}max"),
    "argmin" => PseudoOperatorLimits("arg\u{2009}min"),
    "ascnode" => Letter(symbol::ASCENDING_NODE),
    "ast" => BinaryOp(symbol::ASTERISK_OPERATOR),
    "astrosun" => Letter(symbol::SUN),
    "asymp" => Relation(symbol::EQUIVALENT_TO),
    "awint" => Integral(symbol::ANTICLOCKWISE_INTEGRATION),
    "backdprime" => Ord(symbol::REVERSED_DOUBLE_PRIME),
    "backepsilon" => Letter(symbol::GREEK_REVERSED_LUNATE_EPSILON_SYMBOL),
    "backprime" => Ord(symbol::REVERSED_PRIME),
    "backsim" => Relation(symbol::REVERSED_TILDE),
    "backsimeq" => Relation(symbol::REVERSED_TILDE_EQUALS),
    "backslash" => Ord(symbol::REVERSE_SOLIDUS),
    "backtrprime" => Ord(symbol::REVERSED_TRIPLE_PRIME),
    "bar" => OverUnder(symbol::MACRON, true, Some(OpAttr::StretchyFalse)),
    "barwedge" => BinaryOp(symbol::NAND),
    "bcancel" => Enclose(Notation::DOWN_DIAGONAL),
    "because" => Relation(symbol::BECAUSE),
    "begin" => Begin,
    "beta" => Letter(symbol::GREEK_SMALL_LETTER_BETA),
    "beth" => Letter(symbol::BET_SYMBOL),
    "between" => Relation(symbol::BETWEEN),
    "big" => Big(Size::Scale1, None),
    "bigcap" => BigOp(symbol::N_ARY_INTERSECTION),
    "bigcirc" => Letter(symbol::LARGE_CIRCLE),
    "bigcup" => BigOp(symbol::N_ARY_UNION),
    "bigcupdot" => BigOp(symbol::N_ARY_UNION_OPERATOR_WITH_DOT),
    "bigdoublevee" => BigOp(symbol::TWO_LOGICAL_OR_OPERATOR),
    "bigdoublewedge" => BigOp(symbol::TWO_LOGICAL_AND_OPERATOR),
    "bigg" => Big(Size::Scale3, None),
    "biggl" => Big(Size::Scale3, Some(Class::Open)),
    "biggr" => Big(Size::Scale3, Some(Class::Close)),
    "bigl" => Big(Size::Scale1, Some(Class::Open)),
    "bigodot" => BigOp(symbol::N_ARY_CIRCLED_DOT_OPERATOR),
    "bigoplus" => BigOp(symbol::N_ARY_CIRCLED_PLUS_OPERATOR),
    "bigotimes" => BigOp(symbol::N_ARY_CIRCLED_TIMES_OPERATOR),
    "bigr" => Big(Size::Scale1, Some(Class::Close)),
    "bigsqcap" => BigOp(symbol::N_ARY_SQUARE_INTERSECTION_OPERATOR),
    "bigsqcup" => BigOp(symbol::N_ARY_SQUARE_UNION_OPERATOR),
    "bigstar" => Letter(symbol::BLACK_STAR),
    "bigtimes" => BigOp(symbol::N_ARY_TIMES_OPERATOR),
    "bigtriangledown" => Letter(symbol::WHITE_DOWN_POINTING_TRIANGLE),
    "bigtriangleup" => Letter(symbol::WHITE_UP_POINTING_TRIANGLE),
    "biguplus" => BigOp(symbol::N_ARY_UNION_OPERATOR_WITH_PLUS),
    "bigvee" => BigOp(symbol::N_ARY_LOGICAL_OR),
    "bigwedge" => BigOp(symbol::N_ARY_LOGICAL_AND),
    "binom" => Binom(None),
    "blacklozenge" => Letter(symbol::BLACK_LOZENGE),
    "blacksquare" => Letter(symbol::BLACK_SQUARE),
    "blacktriangle" => Letter(symbol::BLACK_UP_POINTING_TRIANGLE),
    "blacktriangledown" => Letter(symbol::BLACK_DOWN_POINTING_TRIANGLE),
    "blacktriangleleft" => Letter(symbol::BLACK_LEFT_POINTING_TRIANGLE),
    "blacktriangleright" => Letter(symbol::BLACK_RIGHT_POINTING_TRIANGLE),
    "bm" => Transform(MathVariant::Transform(TextTransform::BoldItalic)),
    "bmod" => CustomCmd(0, &predefined::BMOD),
    "boldsymbol" => Transform(MathVariant::Transform(TextTransform::BoldItalic)),
    "bot" => Letter(symbol::UP_TACK),
    "botdoteq" => Relation(symbol::EQUALS_SIGN_WITH_DOT_BELOW),
    "boxbox" => BinaryOp(symbol::SQUARED_SQUARE),
    "boxbslash" => BinaryOp(symbol::SQUARED_FALLING_DIAGONAL_SLASH),
    "boxdot" => BinaryOp(symbol::SQUARED_DOT_OPERATOR),
    "boxminus" => BinaryOp(symbol::SQUARED_MINUS),
    "boxplus" => BinaryOp(symbol::SQUARED_PLUS),
    "boxslash" => BinaryOp(symbol::SQUARED_RISING_DIAGONAL_SLASH),
    "boxtimes" => BinaryOp(symbol::SQUARED_TIMES),
    "breve" => OverUnder(symbol::BREVE, true, None),
    "bullet" => BinaryOp(symbol::BULLET_OPERATOR),
    "bumpeq" => Relation(symbol::DIFFERENCE_BETWEEN),
    "cancel" => Enclose(Notation::UP_DIAGONAL),
    "cap" => BinaryOp(symbol::INTERSECTION),
    "cdot" => BinaryOp(symbol::MIDDLE_DOT),
    "cdots" => CustomCmd(0, &predefined::CDOTS),
    "centerdot" => BinaryOp(symbol::BULLET_OPERATOR),
    "cfrac" => Frac(Some(FracAttr::CFracStyle)),
    "check" => OverUnder(symbol::CARON, true, Some(OpAttr::StretchyFalse)),
    "checkmark" => Letter('✓'),
    "chi" => Letter(symbol::GREEK_SMALL_LETTER_CHI),
    "circ" => BinaryOp(symbol::RING_OPERATOR),
    "circeq" => Relation(symbol::RING_EQUAL_TO),
    "circlearrowleft" => Relation(symbol::ANTICLOCKWISE_OPEN_CIRCLE_ARROW),
    "circlearrowright" => Relation(symbol::CLOCKWISE_OPEN_CIRCLE_ARROW),
    "circledR" => Letter(symbol::CIRCLED_LATIN_CAPITAL_LETTER_R),
    "circledS" => Letter(symbol::CIRCLED_LATIN_CAPITAL_LETTER_S),
    "circledast" => BinaryOp(symbol::CIRCLED_ASTERISK_OPERATOR),
    "circledcirc" => BinaryOp(symbol::CIRCLED_RING_OPERATOR),
    "circleddash" => BinaryOp(symbol::CIRCLED_DASH),
    "cirfnint" => Integral(symbol::CIRCULATION_FUNCTION),
    "clubsuit" => Letter(symbol::BLACK_CLUB_SUIT),
    "colon" => Letter(symbol::COLON.as_op().as_char()),
    "coloneq" => Relation(symbol::COLON_EQUALS),
    "coloneqq" => Relation(symbol::COLON_EQUALS),
    "color" => Color,
    "complement" => Letter(symbol::COMPLEMENT.as_op().as_char()), // should be Ord, but FF has a bug
    "cong" => Relation(symbol::APPROXIMATELY_EQUAL_TO),
    "coprod" => BigOp(symbol::N_ARY_COPRODUCT),
    "copyright" => Letter(symbol::COPYRIGHT_SIGN),
    "cup" => BinaryOp(symbol::UNION),
    "curlyeqprec" => Relation(symbol::EQUAL_TO_OR_PRECEDES),
    "curlyeqsucc" => Relation(symbol::EQUAL_TO_OR_SUCCEEDS),
    "curlyvee" => BinaryOp(symbol::CURLY_LOGICAL_OR),
    "curlywedge" => BinaryOp(symbol::CURLY_LOGICAL_AND),
    "curvearrowleft" => Relation(symbol::ANTICLOCKWISE_TOP_SEMICIRCLE_ARROW),
    "curvearrowright" => Relation(symbol::CLOCKWISE_TOP_SEMICIRCLE_ARROW),
    "dag" => Letter(symbol::DAGGER),
    "dagger" => Letter(symbol::DAGGER),
    "daleth" => Letter(symbol::DALET_SYMBOL),
    "dashcolon" => Relation(symbol::EXCESS),
    "dashv" => Relation(symbol::LEFT_TACK),
    "dbinom" => Binom(Some(FracAttr::DisplayStyleTrue)),
    "dblcolon" => Relation(symbol::PROPORTION),
    "ddag" => Letter(symbol::DOUBLE_DAGGER),
    "ddagger" => Letter(symbol::DOUBLE_DAGGER),
    "ddddot" => OverUnder(symbol::COMBINING_FOUR_DOTS_ABOVE, true, Some(OpAttr::StretchyFalse)),
    "dddot" => OverUnder(symbol::COMBINING_THREE_DOTS_ABOVE, true, Some(OpAttr::StretchyFalse)),
    "ddot" => OverUnder(symbol::DIAERESIS, true, Some(OpAttr::StretchyFalse)),
    "ddots" => Relation(symbol::DOWN_RIGHT_DIAGONAL_ELLIPSIS),
    "delta" => Letter(symbol::GREEK_SMALL_LETTER_DELTA),
    "dfrac" => Frac(Some(FracAttr::DisplayStyleTrue)),
    "diamond" => BinaryOp(symbol::DIAMOND_OPERATOR),
    "diamondsuit" => Letter(symbol::WHITE_DIAMOND_SUIT),
    "digamma" => Letter(symbol::GREEK_SMALL_LETTER_DIGAMMA),
    "displaystyle" => Style(Style::Display),
    "div" => BinaryOp(symbol::DIVISION_SIGN),
    "divideontimes" => BinaryOp(symbol::DIVISION_TIMES),
    "dot" => OverUnder(symbol::DOT_ABOVE, true, None),
    "doteq" => Relation(symbol::APPROACHES_THE_LIMIT),
    "doteqdot" => Relation(symbol::GEOMETRICALLY_EQUAL_TO),
    "dotplus" => BinaryOp(symbol::DOT_PLUS),
    "dots" => CustomCmd(0, &predefined::DOTS),
    "dotsminusdots" => Relation(symbol::GEOMETRIC_PROPORTION),
    "doublebarwedge" => Relation(symbol::LOGICAL_AND_WITH_DOUBLE_OVERBAR),
    "downarrow" => Relation(symbol::DOWNWARDS_ARROW),
    "downdownarrows" => Relation(symbol::DOWNWARDS_PAIRED_ARROWS),
    "downharpoonleft" => Relation(symbol::DOWNWARDS_HARPOON_WITH_BARB_LEFTWARDS),
    "downharpoonright" => Relation(symbol::DOWNWARDS_HARPOON_WITH_BARB_RIGHTWARDS),
    "dprime" => Ord(symbol::DOUBLE_PRIME),
    "earth" => Letter(symbol::EARTH),
    "ell" => Letter(symbol::SCRIPT_SMALL_L),
    "empty" => CustomCmd(0, &[
        Transform(MathVariant::Normal),
        GroupBegin,
        Letter('∅'),
        Letter('\u{FE00}'), // Unicode variation selector
        GroupEnd,
    ]),
    "emptyset" => CustomCmd(0, &[
        Transform(MathVariant::Normal),
        GroupBegin,
        Letter('∅'),
        Letter('\u{FE00}'), // Unicode variation selector
        GroupEnd,
    ]),
    "end" => End,
    "epsilon" => Letter(symbol::GREEK_LUNATE_EPSILON_SYMBOL),
    "eqcirc" => Relation(symbol::RING_IN_EQUAL_TO),
    "eqcolon" => Relation(symbol::EQUALS_COLON),
    "eqdef" => Relation(symbol::EQUAL_TO_BY_DEFINITION), // from "stix"
    "eqqcolon" => Relation(symbol::EQUALS_COLON),
    "eqsim" => Relation(symbol::MINUS_TILDE),
    "eqslantgtr" => Relation(symbol::SLANTED_EQUAL_TO_OR_GREATER_THAN),
    "eqslantless" => Relation(symbol::SLANTED_EQUAL_TO_OR_LESS_THAN),
    "equiv" => Relation(symbol::IDENTICAL_TO),
    "eta" => Letter(symbol::GREEK_SMALL_LETTER_ETA),
    "eth" => Letter(symbol::LATIN_SMALL_LETTER_ETH),
    "euro" => Letter('€'),
    "exists" => Ord(symbol::THERE_EXISTS),
    "fallingdotseq" => Relation(symbol::APPROXIMATELY_EQUAL_TO_OR_THE_IMAGE_OF),
    "fcmp" => Relation(symbol::Z_NOTATION_SCHEMA_COMPOSITION),
    "fint" => Integral(symbol::INTEGRAL_AVERAGE_WITH_SLASH),
    "flat" => Letter('♭'),
    "forall" => Ord(symbol::FOR_ALL),
    "frac" => Frac(None),
    "frown" => Relation(symbol::FROWN),
    "gamma" => Letter(symbol::GREEK_SMALL_LETTER_GAMMA),
    "ge" => Relation(symbol::GREATER_THAN_OR_EQUAL_TO),
    "genfrac" => Genfrac,
    "geq" => Relation(symbol::GREATER_THAN_OR_EQUAL_TO),
    "geqq" => Relation(symbol::GREATER_THAN_OVER_EQUAL_TO),
    "geqslant" => Relation(symbol::GREATER_THAN_OR_SLANTED_EQUAL_TO),
    "gets" => Relation(symbol::LEFTWARDS_ARROW),
    "gg" => Relation(symbol::MUCH_GREATER_THAN),
    "gimel" => Letter(symbol::GIMEL_SYMBOL),
    "gnapprox" => Relation(symbol::GREATER_THAN_AND_NOT_APPROXIMATE),
    "gneq" => Relation(symbol::GREATER_THAN_AND_SINGLE_LINE_NOT_EQUAL_TO),
    "gneqq" => Relation(symbol::GREATER_THAN_BUT_NOT_EQUAL_TO),
    "gnsim" => Relation(symbol::GREATER_THAN_BUT_NOT_EQUIVALENT_TO),
    "grave" => OverUnder(symbol::GRAVE_ACCENT, true, None),
    "gt" => OpGreaterThan,
    "gtrapprox" => Relation(symbol::GREATER_THAN_OR_APPROXIMATE),
    "gtreqless" => Relation(symbol::GREATER_THAN_EQUAL_TO_OR_LESS_THAN),
    "gtreqqless" => Relation(symbol::GREATER_THAN_ABOVE_DOUBLE_LINE_EQUAL_ABOVE_LESS_THAN),
    "gtrless" => Relation(symbol::GREATER_THAN_OR_LESS_THAN),
    "gtrsim" => Relation(symbol::GREATER_THAN_OR_EQUIVALENT_TO),
    "hat" => OverUnder(symbol::COMBINING_CIRCUMFLEX_ACCENT, true, Some(OpAttr::StretchyFalse)),
    "hbar" => Letter(symbol::PLANCK_CONSTANT_OVER_TWO_PI),
    "heartsuit" => Letter(symbol::WHITE_HEART_SUIT),
    "hookleftarrow" => Relation(symbol::LEFTWARDS_ARROW_WITH_HOOK),
    "hookrightarrow" => Relation(symbol::RIGHTWARDS_ARROW_WITH_HOOK),
    "hslash" => Letter(symbol::PLANCK_CONSTANT_OVER_TWO_PI),
    "hspace" => CustomSpace,
    "iff" => CustomCmd(0, &predefined::IFF),
    "iiiint" => Integral(symbol::QUADRUPLE_INTEGRAL_OPERATOR),
    "iiint" => Integral(symbol::TRIPLE_INTEGRAL),
    "iint" => Integral(symbol::DOUBLE_INTEGRAL),
    "imath" => Letter(symbol::LATIN_SMALL_LETTER_DOTLESS_I),
    "impliedby" => CustomCmd(0, &predefined::IMPLIEDBY),
    "implies" => CustomCmd(0, &predefined::IMPLIES),
    "in" => Relation(symbol::ELEMENT_OF),
    "inf" => PseudoOperatorLimits("inf"),
    "infty" => Letter(symbol::INFINITY),
    "int" => Integral(symbol::INTEGRAL),
    "intBar" => Integral(symbol::INTEGRAL_WITH_DOUBLE_STROKE),
    "intbar" => Integral(symbol::FINITE_PARTL_INTEGRAL),
    "intclockwise" => Integral(symbol::CLOCKWISE_INTEGRAL),
    "intercal" => Relation(symbol::INTERCALATE),
    "iota" => Letter(symbol::GREEK_SMALL_LETTER_IOTA),
    "jmath" => Letter(symbol::LATIN_SMALL_LETTER_DOTLESS_J),
    "jupiter" => Letter(symbol::JUPITER),
    "kappa" => Letter(symbol::GREEK_SMALL_LETTER_KAPPA),
    "kernelcontraction" => Relation(symbol::HOMOTHETIC),
    "lBrace" => Open(symbol::LEFT_WHITE_CURLY_BRACKET),
    "lVert" => Ord(symbol::DOUBLE_VERTICAL_LINE),
    "lambda" => Letter(symbol::GREEK_SMALL_LETTER_LAMBDA),
    "land" => BinaryOp(symbol::LOGICAL_AND),
    "langle" => Open(symbol::MATHEMATICAL_LEFT_ANGLE_BRACKET),
    "lbrace" => Open(symbol::LEFT_CURLY_BRACKET),
    "lbrack" => Open(symbol::LEFT_SQUARE_BRACKET),
    "lceil" => Open(symbol::LEFT_CEILING),
    "ldots" => CustomCmd(0, &predefined::DOTS),
    "le" => Relation(symbol::LESS_THAN_OR_EQUAL_TO),
    "left" => Left,
    "leftarrow" => Relation(symbol::LEFTWARDS_ARROW),
    "leftarrowtail" => Relation(symbol::LEFTWARDS_ARROW_WITH_TAIL),
    "leftharpoondown" => Relation(symbol::LEFTWARDS_HARPOON_WITH_BARB_DOWNWARDS),
    "leftharpoonup" => Relation(symbol::LEFTWARDS_HARPOON_WITH_BARB_UPWARDS),
    "leftleftarrows" => Relation(symbol::LEFTWARDS_PAIRED_ARROWS),
    "leftrightarrow" => Relation(symbol::LEFT_RIGHT_ARROW),
    "leftrightarrows" => Relation(symbol::LEFTWARDS_ARROW_OVER_RIGHTWARDS_ARROW),
    "leftrightharpoons" => Relation(symbol::LEFTWARDS_HARPOON_OVER_RIGHTWARDS_HARPOON),
    "leftrightsquigarrow" => Relation(symbol::LEFT_RIGHT_WAVE_ARROW),
    "leftthreetimes" => BinaryOp(symbol::LEFT_SEMIDIRECT_PRODUCT),
    "leq" => Relation(symbol::LESS_THAN_OR_EQUAL_TO),
    "leqq" => Relation(symbol::LESS_THAN_OVER_EQUAL_TO),
    "leqslant" => Relation(symbol::LESS_THAN_OR_SLANTED_EQUAL_TO),
    "lessapprox" => Relation(symbol::LESS_THAN_OR_APPROXIMATE),
    "lessdot" => Relation(symbol::LESS_THAN_WITH_DOT),
    "lesseqgtr" => Relation(symbol::LESS_THAN_EQUAL_TO_OR_GREATER_THAN),
    "lesseqqgtr" => Relation(symbol::LESS_THAN_ABOVE_DOUBLE_LINE_EQUAL_ABOVE_GREATER_THAN),
    "lessgtr" => Relation(symbol::LESS_THAN_OR_GREATER_THAN),
    "lesssim" => Relation(symbol::LESS_THAN_OR_EQUIVALENT_TO),
    "lfloor" => Open(symbol::LEFT_FLOOR),
    "lgroup" => Open(symbol::MATHEMATICAL_LEFT_FLATTENED_PARENTHESIS),
    "lhd" => Relation(symbol::NORMAL_SUBGROUP_OF),
    "lightning" => Relation(symbol::DOWNWARDS_ZIGZAG_ARROW),
    "lim" => PseudoOperatorLimits("lim"),
    "liminf" => PseudoOperatorLimits("lim\u{2009}inf"),
    "limits" => Limits,
    "limsup" => PseudoOperatorLimits("lim\u{2009}sup"),
    "ll" => Relation(symbol::MUCH_LESS_THAN),
    "llangle" => Open(symbol::Z_NOTATION_LEFT_BINDING_BRACKET),
    "llbracket" => Open(symbol::MATHEMATICAL_LEFT_WHITE_SQUARE_BRACKET),
    "llcorner" => Letter(symbol::BOTTOM_LEFT_CORNER),
    "lll" => Relation(symbol::VERY_MUCH_LESS_THAN),
    "llparenthesis" => Open(symbol::Z_NOTATION_LEFT_IMAGE_BRACKET),
    "lnapprox" => Relation(symbol::LESS_THAN_AND_NOT_APPROXIMATE),
    "lneq" => Relation(symbol::LESS_THAN_AND_SINGLE_LINE_NOT_EQUAL_TO),
    "lneqq" => Relation(symbol::LESS_THAN_BUT_NOT_EQUAL_TO),
    "lnot" => Ord(symbol::NOT_SIGN),
    "lnsim" => Relation(symbol::LESS_THAN_BUT_NOT_EQUIVALENT_TO),
    "longleftarrow" => Relation(symbol::LONG_LEFTWARDS_ARROW),
    "longleftrightarrow" => Relation(symbol::LONG_LEFT_RIGHT_ARROW),
    "longmapsto" => Relation(symbol::LONG_RIGHTWARDS_ARROW_FROM_BAR),
    "longrightarrow" => Relation(symbol::LONG_RIGHTWARDS_ARROW),
    "looparrowleft" => Relation(symbol::LEFTWARDS_ARROW_WITH_LOOP),
    "looparrowright" => Relation(symbol::RIGHTWARDS_ARROW_WITH_LOOP),
    "lor" => BinaryOp(symbol::LOGICAL_OR),
    "lozenge" => Letter(symbol::LOZENGE),
    "lrcorner" => Letter(symbol::BOTTOM_RIGHT_CORNER),
    "lt" => OpLessThan,
    "ltimes" => BinaryOp(symbol::LEFT_NORMAL_FACTOR_SEMIDIRECT_PRODUCT),
    "lvert" => Ord(symbol::VERTICAL_LINE),
    "maltese" => Letter(symbol::MALTESE_CROSS),
    "mapsto" => Relation(symbol::RIGHTWARDS_ARROW_FROM_BAR),
    "mars" => Letter(symbol::MALE_SIGN),
    "mathbb" => Transform(MathVariant::Transform(TextTransform::DoubleStruck)),
    "mathbf" => Transform(MathVariant::Transform(TextTransform::Bold)),
    "mathcal" => Transform(MathVariant::Transform(TextTransform::ScriptChancery)),
    "mathfrak" => Transform(MathVariant::Transform(TextTransform::Fraktur)),
    "mathit" => Transform(MathVariant::Transform(TextTransform::Italic)),
    "mathrm" => Transform(MathVariant::Normal),
    "mathscr" => Transform(MathVariant::Transform(TextTransform::ScriptRoundhand)),
    "mathsf" => Transform(MathVariant::Transform(TextTransform::SansSerif)),
    "mathstrut" => HardcodedMathML(r#"<mpadded width="0" style="visibility:hidden"><mo stretchy="false">(</mo></mpadded>"#),
    "mathtt" => Transform(MathVariant::Transform(TextTransform::Monospace)),
    "max" => PseudoOperatorLimits("max"),
    "measeq" => Relation(symbol::MEASURED_BY), // from "stix"
    "measuredangle" => Letter(symbol::MEASURED_ANGLE),
    "mercury" => Letter(symbol::MERCURY),
    "mho" => Letter(symbol::INVERTED_OHM_SIGN),
    "mid" => Relation(symbol::DIVIDES),
    "middle" => Middle,
    "min" => PseudoOperatorLimits("min"),
    "mod" => CustomCmd(0, &predefined::MOD),
    "models" => Relation(symbol::TRUE),
    "mp" => BinaryOp(symbol::MINUS_OR_PLUS_SIGN),
    "mspace" => CustomSpace,
    "mu" => Letter(symbol::GREEK_SMALL_LETTER_MU),
    "multimap" => Relation(symbol::MULTIMAP),
    "nLeftarrow" => Relation(symbol::LEFTWARDS_DOUBLE_ARROW_WITH_STROKE),
    "nLeftrightarrow" => Relation(symbol::LEFT_RIGHT_DOUBLE_ARROW_WITH_STROKE),
    "nRightarrow" => Relation(symbol::RIGHTWARDS_DOUBLE_ARROW_WITH_STROKE),
    "nVDash" => Relation(symbol::NEGATED_DOUBLE_VERTICAL_BAR_DOUBLE_RIGHT_TURNSTILE),
    "nVdash" => Relation(symbol::DOES_NOT_FORCE),
    "nabla" => UprightLetter(symbol::NABLA),
    "natural" => Letter('♮'),
    "ne" => Relation(symbol::NOT_EQUAL_TO),
    "nearrow" => Relation(symbol::NORTH_EAST_ARROW),
    "neg" => Ord(symbol::NOT_SIGN),
    "neptune" => Letter(symbol::NEPTUNE),
    "neq" => Relation(symbol::NOT_EQUAL_TO),
    "nequiv" => Relation(symbol::NOT_IDENTICAL_TO),
    "nexists" => Ord(symbol::THERE_DOES_NOT_EXIST),
    "ngeq" => Relation(symbol::NEITHER_GREATER_THAN_NOR_EQUAL_TO),
    "ngtr" => Relation(symbol::NOT_GREATER_THAN),
    "ngtrless" => Relation(symbol::NEITHER_GREATER_THAN_NOR_LESS_THAN),
    "ngtrsim" => Relation(symbol::NEITHER_GREATER_THAN_NOR_EQUIVALENT_TO),
    "ni" => Relation(symbol::CONTAINS_AS_MEMBER),
    "nleftarrow" => Relation(symbol::LEFTWARDS_ARROW_WITH_STROKE),
    "nleftrightarrow" => Relation(symbol::LEFT_RIGHT_ARROW_WITH_STROKE),
    "nleq" => Relation(symbol::NEITHER_LESS_THAN_NOR_EQUAL_TO),
    "nless" => Relation(symbol::NOT_LESS_THAN),
    "nlessgt" => Relation(symbol::NEITHER_LESS_THAN_NOR_GREATER_THAN),
    "nlesssim" => Relation(symbol::NEITHER_LESS_THAN_NOR_EQUIVALENT_TO),
    "nmid" => Relation(symbol::DOES_NOT_DIVIDE),
    "not" => Not,
    "notin" => Relation(symbol::NOT_AN_ELEMENT_OF),
    "nparallel" => Relation(symbol::NOT_PARALLEL_TO),
    "nprec" => Relation(symbol::DOES_NOT_PRECEDE),
    "npreceq" => Relation(symbol::DOES_NOT_PRECEDE_OR_EQUAL),
    "nrightarrow" => Relation(symbol::RIGHTWARDS_ARROW_WITH_STROKE),
    "nsim" => Relation(symbol::NOT_TILDE),
    "nsubset" => Relation(symbol::NOT_A_SUBSET_OF),
    "nsubseteq" => Relation(symbol::NEITHER_A_SUBSET_OF_NOR_EQUAL_TO),
    "nsucc" => Relation(symbol::DOES_NOT_SUCCEED),
    "nsucceq" => Relation(symbol::DOES_NOT_SUCCEED_OR_EQUAL),
    "nsupset" => Relation(symbol::NOT_A_SUPERSET_OF),
    "nsupseteq" => Relation(symbol::NEITHER_A_SUPERSET_OF_NOR_EQUAL_TO),
    "nu" => Letter(symbol::GREEK_SMALL_LETTER_NU),
    "nvDash" => Relation(symbol::NOT_TRUE),
    "nvdash" => Relation(symbol::DOES_NOT_PROVE),
    "nwarrow" => Relation(symbol::NORTH_WEST_ARROW),
    "odot" => BinaryOp(symbol::CIRCLED_DOT_OPERATOR),
    "odv" => CustomCmd(2, &predefined::ODV),
    "oiiint" => Integral(symbol::VOLUME_INTEGRAL),
    "oiint" => Integral(symbol::SURFACE_INTEGRAL),
    "oint" => Integral(symbol::CONTOUR_INTEGRAL),
    "ointctrclockwise" => Integral(symbol::ANTICLOCKWISE_CONTOUR_INTEGRAL),
    "omega" => Letter(symbol::GREEK_SMALL_LETTER_OMEGA),
    "omicron" => Letter(symbol::GREEK_SMALL_LETTER_OMICRON),
    "ominus" => BinaryOp(symbol::CIRCLED_MINUS),
    "operatorname" => OperatorName,
    "oplus" => BinaryOp(symbol::CIRCLED_PLUS),
    "oslash" => BinaryOp(symbol::CIRCLED_DIVISION_SLASH),
    "otimes" => BinaryOp(symbol::CIRCLED_TIMES),
    "overbrace" => OverUnderBrace(symbol::TOP_CURLY_BRACKET, true),
    "overbracket" => OverUnderBrace(symbol::TOP_SQUARE_BRACKET, true),
    "overleftarrow" => OverUnder(symbol::LEFTWARDS_ARROW, true, None),
    "overline" => OverUnder(symbol::OVERLINE, true, None),
    "overparen" => OverUnderBrace(symbol::TOP_PARENTHESIS, true),
    "overrightarrow" => OverUnder(symbol::RIGHTWARDS_ARROW, true, None),
    "overset" => Overset,
    "parallel" => Relation(symbol::PARALLEL_TO),
    "partial" => Letter(symbol::PARTIAL_DIFFERENTIAL),
    "perp" => Relation(symbol::PERPENDICULAR),
    "phi" => Letter(symbol::GREEK_PHI_SYMBOL),
    "pi" => Letter(symbol::GREEK_SMALL_LETTER_PI),
    "pitchfork" => Relation(symbol::PITCHFORK),
    "pm" => BinaryOp(symbol::PLUS_MINUS_SIGN),
    "pmod" => CustomCmd(1, &predefined::PMOD),
    "pounds" => Letter('£'),
    "prec" => Relation(symbol::PRECEDES),
    "precapprox" => Relation(symbol::PRECEDES_ABOVE_ALMOST_EQUAL_TO),
    "preccurlyeq" => Relation(symbol::PRECEDES_OR_EQUAL_TO),
    "preceq" => Relation(symbol::PRECEDES_ABOVE_SINGLE_LINE_EQUALS_SIGN),
    "precnapprox" => Relation(symbol::PRECEDES_ABOVE_NOT_ALMOST_EQUAL_TO),
    "precneqq" => Relation(symbol::PRECEDES_ABOVE_NOT_EQUAL_TO),
    "precnsim" => Relation(symbol::PRECEDES_BUT_NOT_EQUIVALENT_TO),
    "precsim" => Relation(symbol::PRECEDES_OR_EQUIVALENT_TO),
    "prime" => Ord(symbol::PRIME),
    "prod" => BigOp(symbol::N_ARY_PRODUCT),
    "propto" => Relation(symbol::PROPORTIONAL_TO),
    "psi" => Letter(symbol::GREEK_SMALL_LETTER_PSI),
    "qprime" => Ord(symbol::QUADRUPLE_PRIME),
    "qquad" => Space(LatexUnit::Em.length_with_unit(2.0)),
    "quad" => Space(LatexUnit::Em.length_with_unit(1.0)),
    "questeq" => Relation(symbol::QUESTIONED_EQUAL_TO), // from "stix"
    "rBrace" => Close(symbol::RIGHT_WHITE_CURLY_BRACKET),
    "rVert" => Ord(symbol::DOUBLE_VERTICAL_LINE),
    "rangle" => Close(symbol::MATHEMATICAL_RIGHT_ANGLE_BRACKET),
    "rbrace" => Close(symbol::RIGHT_CURLY_BRACKET),
    "rbrack" => Close(symbol::RIGHT_SQUARE_BRACKET),
    "rceil" => Close(symbol::RIGHT_CEILING),
    "rfloor" => Close(symbol::RIGHT_FLOOR),
    "rgroup" => Close(symbol::MATHEMATICAL_RIGHT_FLATTENED_PARENTHESIS),
    "rhd" => Relation(symbol::CONTAINS_AS_NORMAL_SUBGROUP),
    "rho" => Letter(symbol::GREEK_SMALL_LETTER_RHO),
    "right" => Right,
    "rightarrow" => Relation(symbol::RIGHTWARDS_ARROW),
    "rightarrowtail" => Relation(symbol::RIGHTWARDS_ARROW_WITH_TAIL),
    "rightharpoondown" => Relation(symbol::RIGHTWARDS_HARPOON_WITH_BARB_DOWNWARDS),
    "rightharpoonup" => Relation(symbol::RIGHTWARDS_HARPOON_WITH_BARB_UPWARDS),
    "rightleftarrows" => Relation(symbol::RIGHTWARDS_ARROW_OVER_LEFTWARDS_ARROW),
    "rightleftharpoons" => Relation(symbol::RIGHTWARDS_HARPOON_OVER_LEFTWARDS_HARPOON),
    "rightrightarrows" => Relation(symbol::RIGHTWARDS_PAIRED_ARROWS),
    "rightsquigarrow" => Relation(symbol::RIGHTWARDS_SQUIGGLE_ARROW),
    "rightthreetimes" => BinaryOp(symbol::RIGHT_SEMIDIRECT_PRODUCT),
    "risingdotseq" => Relation(symbol::IMAGE_OF_OR_APPROXIMATELY_EQUAL_TO),
    "rq" => Letter('’'),
    "rrangle" => Close(symbol::Z_NOTATION_RIGHT_BINDING_BRACKET),
    "rrbracket" => Close(symbol::MATHEMATICAL_RIGHT_WHITE_SQUARE_BRACKET),
    "rrparenthesis" => Close(symbol::Z_NOTATION_RIGHT_IMAGE_BRACKET),
    "rtimes" => BinaryOp(symbol::RIGHT_NORMAL_FACTOR_SEMIDIRECT_PRODUCT),
    "rupee" => Letter('₹'),
    "rvert" => Ord(symbol::VERTICAL_LINE),
    "saturn" => Letter(symbol::SATURN),
    "scriptscriptstyle" => Style(Style::ScriptScript),
    "scriptstyle" => Style(Style::Script),
    "searrow" => Relation(symbol::SOUTH_EAST_ARROW),
    "setminus" => BinaryOp(symbol::SET_MINUS),
    "sharp" => Letter('♯'),
    "sigma" => Letter(symbol::GREEK_SMALL_LETTER_SIGMA),
    "sim" => Relation(symbol::TILDE_OPERATOR),
    "simeq" => Relation(symbol::ASYMPTOTICALLY_EQUAL_TO),
    "slashed" => Slashed,
    "smile" => Relation(symbol::SMILE),
    "sout" => Enclose(Notation::HORIZONTAL),
    "spadesuit" => Letter(symbol::BLACK_SPADE_SUIT),
    "sphericalangle" => Letter(symbol::SPHERICAL_ANGLE),
    "sqcap" => BinaryOp(symbol::SQUARE_CAP),
    "sqcup" => BinaryOp(symbol::SQUARE_CUP),
    "sqrt" => Sqrt,
    "sqsubset" => Relation(symbol::SQUARE_IMAGE_OF),
    "sqsubseteq" => Relation(symbol::SQUARE_IMAGE_OF_OR_EQUAL_TO),
    "sqsupset" => Relation(symbol::SQUARE_ORIGINAL_OF),
    "sqsupseteq" => Relation(symbol::SQUARE_ORIGINAL_OF_OR_EQUAL_TO),
    "square" => Letter(symbol::WHITE_SQUARE),
    "stackrel" => Overset,
    "star" => BinaryOp(symbol::STAR_OPERATOR),
    "stareq" => Relation(symbol::STAR_EQUALS), // from "stix"
    "subset" => Relation(symbol::SUBSET_OF),
    "subseteq" => Relation(symbol::SUBSET_OF_OR_EQUAL_TO),
    "subsetneq" => Relation(symbol::SUBSET_OF_WITH_NOT_EQUAL_TO),
    "subsetneqq" => Relation(symbol::SUBSET_OF_ABOVE_NOT_EQUAL_TO),
    "succ" => Relation(symbol::SUCCEEDS),
    "succapprox" => Relation(symbol::SUCCEEDS_ABOVE_ALMOST_EQUAL_TO),
    "succcurlyeq" => Relation(symbol::SUCCEEDS_OR_EQUAL_TO),
    "succeq" => Relation(symbol::SUCCEEDS_ABOVE_SINGLE_LINE_EQUALS_SIGN),
    "succnapprox" => Relation(symbol::SUCCEEDS_ABOVE_NOT_ALMOST_EQUAL_TO),
    "succneqq" => Relation(symbol::SUCCEEDS_ABOVE_NOT_EQUAL_TO),
    "succnsim" => Relation(symbol::SUCCEEDS_BUT_NOT_EQUIVALENT_TO),
    "succsim" => Relation(symbol::SUCCEEDS_OR_EQUIVALENT_TO),
    "sum" => BigOp(symbol::N_ARY_SUMMATION),
    "sumint" => BigOp(symbol::SUMMATION_WITH_INTEGRAL),
    "sun" => Letter(symbol::WHITE_SUN_WITH_RAYS),
    "sup" => PseudoOperatorLimits("sup"),
    "supset" => Relation(symbol::SUPERSET_OF),
    "supseteq" => Relation(symbol::SUPERSET_OF_OR_EQUAL_TO),
    "supsetneq" => Relation(symbol::SUPERSET_OF_WITH_NOT_EQUAL_TO),
    "supsetneqq" => Relation(symbol::SUPERSET_OF_ABOVE_NOT_EQUAL_TO),
    "swarrow" => Relation(symbol::SOUTH_WEST_ARROW),
    "symbf" => Transform(MathVariant::Transform(TextTransform::BoldItalic)),
    "tau" => Letter(symbol::GREEK_SMALL_LETTER_TAU),
    "tbinom" => Binom(Some(FracAttr::DisplayStyleFalse)),
    "text" => Text(None),
    "textbf" => Text(Some(TextTransform::Bold)),
    "textit" => Text(Some(TextTransform::Italic)),
    "textstyle" => Style(Style::Text),
    "texttt" => Text(Some(TextTransform::Monospace)),
    "tfrac" => Frac(Some(FracAttr::DisplayStyleFalse)),
    "th" => Letter(symbol::LATIN_SMALL_LETTER_THORN),
    "therefore" => Relation(symbol::THEREFORE),
    "theta" => Letter(symbol::GREEK_SMALL_LETTER_THETA),
    "tilde" => OverUnder(symbol::COMBINING_TILDE, true, Some(OpAttr::StretchyFalse)),
    "times" => BinaryOp(symbol::MULTIPLICATION_SIGN),
    "to" => Relation(symbol::RIGHTWARDS_ARROW),
    "top" => Letter(symbol::DOWN_TACK),
    "triangle" => Letter(symbol::WHITE_UP_POINTING_TRIANGLE),
    "triangledown" => Letter(symbol::WHITE_DOWN_POINTING_TRIANGLE),
    "triangleleft" => Letter(symbol::WHITE_LEFT_POINTING_TRIANGLE),
    "triangleq" => Relation(symbol::DELTA_EQUAL_TO),
    "triangleright" => Letter(symbol::WHITE_RIGHT_POINTING_TRIANGLE),
    "trprime" => Ord(symbol::TRIPLE_PRIME),
    "twoheadleftarrow" => Relation(symbol::LEFTWARDS_TWO_HEADED_ARROW),
    "twoheadrightarrow" => Relation(symbol::RIGHTWARDS_TWO_HEADED_ARROW),
    "ulcorner" => Letter(symbol::TOP_LEFT_CORNER),
    "underbrace" => OverUnderBrace(symbol::BOTTOM_CURLY_BRACKET, false),
    "underbracket" => OverUnderBrace(symbol::BOTTOM_SQUARE_BRACKET, false),
    "underline" => OverUnder(symbol::LOW_LINE, false, None),
    "underparen" => OverUnderBrace(symbol::BOTTOM_PARENTHESIS, false),
    "underset" => Underset,
    "unlhd" => Relation(symbol::NORMAL_SUBGROUP_OF_OR_EQUAL_TO),
    "unrhd" => Relation(symbol::CONTAINS_AS_NORMAL_SUBGROUP_OR_EQUAL_TO),
    "uparrow" => Relation(symbol::UPWARDS_ARROW),
    "updownarrow" => Relation(symbol::UP_DOWN_ARROW),
    "upharpoonleft" => Relation(symbol::UPWARDS_HARPOON_WITH_BARB_LEFTWARDS),
    "upharpoonright" => Relation(symbol::UPWARDS_HARPOON_WITH_BARB_RIGHTWARDS),
    "uplus" => BinaryOp(symbol::MULTISET_UNION),
    "upsilon" => Letter(symbol::GREEK_SMALL_LETTER_UPSILON),
    "upuparrows" => Relation(symbol::UPWARDS_PAIRED_ARROWS),
    "uranus" => Letter(symbol::URANUS),
    "urcorner" => Letter(symbol::TOP_RIGHT_CORNER),
    "vDash" => Relation(symbol::TRUE),
    "varDelta" => Letter(symbol::GREEK_CAPITAL_LETTER_DELTA), // italicized
    "varGamma" => Letter(symbol::GREEK_CAPITAL_LETTER_GAMMA), // italicized
    "varLambda" => Letter(symbol::GREEK_CAPITAL_LETTER_LAMBDA), // italicized
    "varOmega" => Letter(symbol::GREEK_CAPITAL_LETTER_OMEGA), // italicized
    "varPhi" => Letter(symbol::GREEK_CAPITAL_LETTER_PHI), // italicized
    "varPi" => Letter(symbol::GREEK_CAPITAL_LETTER_PI), // italicized
    "varSigma" => Letter(symbol::GREEK_CAPITAL_LETTER_SIGMA), // italicized
    "varTheta" => Letter(symbol::GREEK_CAPITAL_LETTER_THETA), // italicized
    "varUpsilon" => Letter(symbol::GREEK_CAPITAL_LETTER_UPSILON), // italicized
    "varXi" => Letter(symbol::GREEK_CAPITAL_LETTER_XI), // italicized
    "varepsilon" => Letter(symbol::GREEK_SMALL_LETTER_EPSILON),
    "varkappa" => Letter(symbol::GREEK_KAPPA_SYMBOL),
    "varnothing" => Letter(symbol::EMPTY_SET),
    "varointclockwise" => Integral(symbol::CLOCKWISE_CONTOUR_INTEGRAL),
    "varphi" => Letter(symbol::GREEK_SMALL_LETTER_PHI),
    "varpi" => Letter(symbol::GREEK_PI_SYMBOL),
    "varrho" => Letter(symbol::GREEK_RHO_SYMBOL),
    "varsigma" => Letter(symbol::GREEK_SMALL_LETTER_FINAL_SIGMA),
    "vartheta" => Letter(symbol::GREEK_THETA_SYMBOL),
    "vartriangle" => Letter(symbol::WHITE_UP_POINTING_TRIANGLE),
    "vdash" => Relation(symbol::RIGHT_TACK),
    "vdots" => Relation(symbol::VERTICAL_ELLIPSIS),
    "vec" => OverUnder(symbol::COMBINING_RIGHT_ARROW_ABOVE, true, Some(OpAttr::StretchyFalse)),
    "vee" => BinaryOp(symbol::LOGICAL_OR),
    "veebar" => BinaryOp(symbol::XOR),
    "veeeq" => Relation(symbol::EQUIANGULAR_TO), // from "stix"
    "venus" => Letter(symbol::FEMALE_SIGN),
    "vert" => Ord(symbol::VERTICAL_LINE),
    "wedge" => BinaryOp(symbol::LOGICAL_AND),
    "wedgeq" => Relation(symbol::ESTIMATES), // from "stix"
    "widecheck" => OverUnder(symbol::CARON, true, None),
    "widehat" => OverUnder(symbol::CIRCUMFLEX_ACCENT, true, None),
    "wideparen" => OverUnderBrace(symbol::TOP_PARENTHESIS, true),
    "widetilde" => OverUnder(symbol::TILDE, true, None),
    "wp" => Letter(symbol::SCRIPT_CAPITAL_P),
    "wr" => BinaryOp(symbol::WREATH_PRODUCT),
    "xcancel" => Enclose(Notation::UP_DIAGONAL.union(Notation::DOWN_DIAGONAL)),
    "xi" => Letter(symbol::GREEK_SMALL_LETTER_XI),
    "xleftarrow" => CustomCmd(1, &predefined::XLEFTARROW),
    "xrightarrow" => CustomCmd(1, &predefined::XRIGHTARROW),
    "zeta" => Letter(symbol::GREEK_SMALL_LETTER_ZETA),
    "{" => Open(symbol::LEFT_CURLY_BRACKET),
    "|" => Ord(symbol::DOUBLE_VERTICAL_LINE),
    "}" => Close(symbol::RIGHT_CURLY_BRACKET),
};

pub fn get_command(command: &str) -> Option<Token<'static>> {
    match COMMANDS.get(command) {
        Some(token) => Some(*token),
        None => {
            if let Some(function) = FUNCTIONS.get_key(command) {
                return Some(PseudoOperator(function));
            }
            None
        }
    }
}

pub fn get_negated_op(op: Rel) -> Option<Rel> {
    match op {
        symbol::ALMOST_EQUAL_TO => Some(symbol::NOT_ALMOST_EQUAL_TO),
        symbol::APPROXIMATELY_EQUAL_TO => Some(symbol::NOT_ASYMPTOTICALLY_EQUAL_TO),
        symbol::DOUBLE_VERTICAL_BAR_DOUBLE_RIGHT_TURNSTILE => {
            Some(symbol::NEGATED_DOUBLE_VERTICAL_BAR_DOUBLE_RIGHT_TURNSTILE)
        }
        symbol::ELEMENT_OF => Some(symbol::NOT_AN_ELEMENT_OF),
        symbol::FORCES => Some(symbol::DOES_NOT_FORCE),
        symbol::GREATER_THAN_OVER_EQUAL_TO => Some(symbol::NEITHER_GREATER_THAN_NOR_EQUAL_TO),
        symbol::LESS_THAN_OR_EQUAL_TO => Some(symbol::NEITHER_LESS_THAN_NOR_EQUAL_TO),
        symbol::PRECEDES => Some(symbol::DOES_NOT_PRECEDE),
        symbol::RIGHT_TACK => Some(symbol::DOES_NOT_PROVE),
        symbol::SUBSET_OF => Some(symbol::NOT_A_SUBSET_OF),
        symbol::SUBSET_OF_OR_EQUAL_TO => Some(symbol::NEITHER_A_SUBSET_OF_NOR_EQUAL_TO),
        symbol::SUCCEEDS => Some(symbol::DOES_NOT_SUCCEED),
        symbol::SUPERSET_OF => Some(symbol::NOT_A_SUPERSET_OF),
        symbol::SUPERSET_OF_OR_EQUAL_TO => Some(symbol::NEITHER_A_SUPERSET_OF_NOR_EQUAL_TO),
        symbol::TRUE => Some(symbol::NOT_TRUE),
        _ => None,
    }
}

static TEXT_COMMANDS: phf::Map<&'static str, Token> = phf::phf_map! {
    " " => NonBreakingSpace,
    "%" => Letter('%'),
    "'" => TextModeAccent(symbol::COMBINING_ACUTE_ACCENT),
    "," => Space(LatexUnit::Mu.length_with_unit(3.0)),
    "." => TextModeAccent(symbol::COMBINING_DOT_ABOVE),
    ":" => Space(LatexUnit::Mu.length_with_unit(4.0)),
    ";" => Space(LatexUnit::Mu.length_with_unit(5.0)),
    "=" => TextModeAccent(symbol::COMBINING_OVERLINE),
    ">" => Space(LatexUnit::Mu.length_with_unit(4.0)),
    "AA" => Letter('Å'),
    "AE" => Letter('Æ'),
    "DH" => Letter('Ð'),
    "DJ" => Letter('Ð'),
    "H" => TextModeAccent(symbol::COMBINING_DOUBLE_ACUTE_ACCENT),
    "L" => Letter('Ł'),
    "NG" => Letter('Ŋ'),
    "O" => Letter('Ø'),
    "OE" => Letter('Œ'),
    "TH" => Letter('Þ'),
    "\"" => TextModeAccent(symbol::COMBINING_DIAERESIS),
    "^" => TextModeAccent(symbol::COMBINING_CIRCUMFLEX_ACCENT.as_op().as_char()),
    "`" => TextModeAccent(symbol::COMBINING_GRAVE_ACCENT),
    "aa" => Letter('å'),
    "ae" => Letter('æ'),
    "c" => TextModeAccent(symbol::COMBINING_CEDILLA),
    "dh" => Letter('ð'),
    "dj" => Letter('đ'),
    "dots" => Letter(symbol::HORIZONTAL_ELLIPSIS),
    "i" => Letter('ı'),
    "j" => Letter('ȷ'),
    "l" => Letter('ł'),
    "ldots" => Letter(symbol::HORIZONTAL_ELLIPSIS),
    "ng" => Letter('ŋ'),
    "o" => Letter('ø'),
    "oe" => Letter('œ'),
    "r" => TextModeAccent(symbol::COMBINING_RING_ABOVE),
    "rq" => Letter('’'),
    "ss" => Letter('ß'),
    "text" => Text(None),
    "textbackslash" => Letter('\\'),
    "textbf" => Text(Some(TextTransform::Bold)),
    "textit" => Text(Some(TextTransform::Italic)),
    "textstyle" => Style(Style::Text),
    "texttt" => Text(Some(TextTransform::Monospace)),
    "textyen" => Letter('¥'),
    "u" => TextModeAccent(symbol::COMBINING_BREVE),
    "v" => TextModeAccent(symbol::COMBINING_CARON.as_op().as_char()),
    "{" => Open(symbol::LEFT_CURLY_BRACKET),
    "|" => Ord(symbol::DOUBLE_VERTICAL_LINE),
    "}" => Close(symbol::RIGHT_CURLY_BRACKET),
    "~" => TextModeAccent(symbol::COMBINING_TILDE.as_op().as_char()),
};

pub fn get_text_command(command: &str) -> Option<Token<'static>> {
    TEXT_COMMANDS.get(command).copied()
}
